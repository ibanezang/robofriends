{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","intialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","map","robot","components_Card","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","console","log","color","onClick","Component","Header","components_CounterButton","ErrorBoundary","hasError","App","onRequestRobots","_this$props","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64e44e3c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst intialStateSearch = {\n\tsearchField: ''\n};\n\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: false });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow shadow-2'>\n\t\t\t<img src={`https://robohash.org/test${id}?size?200x200`} alt='robot'/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((robot) => { \n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={ robot.id } \n\t\t\t\t\t\t\tid={ robot.id } \n\t\t\t\t\t\t\tname={robot.name} \n\t\t\t\t\t\t\temail={robot.email} />\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ onSearchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Type name or email'\n\t\t\t\tonChange={ onSearchChange }/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass CounterButton extends Component{\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        console.log(nextProps, nextState);\n        if(this.state.count !== nextState.count){\n            return true;\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n                return { count: state.count + 1 }\n            }\n        );\n    }\n    \n    render(){\n        console.log('CounterButton');\n        return  (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, {Component} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component{\n    shouldComponentUpdate(nextProps, nextState){\n        return true;\n    }\n\n    render(){\n        console.log('Header');\n        return  (\n            <div>\n                <h1 className='f1'>Robo Friends</h1>\n                <CounterButton color={'red'}/>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromError(error){\n\t\treturn {hasError: true};\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oppps something nasty is happening :(</h1>\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter( robot =>\n\t\t\t\trobot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t\t\t|| robot.email.toLowerCase().includes(searchField.toLowerCase())\n\t\t\t);\n\n\t\tif(isPending){\n\t\t\treturn <h1>Loading Robots!</h1>\n\t\t}\n\t\telse{\n\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<Header/>\n\t\t\t\t\t<SearchBox \n\t\t\t\t\t\tonSearchChange={ onSearchChange } />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={ filteredRobots }/>\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => {\n\treturn{\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t}\n};\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport App from './containers/App';\nimport './index.css'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Hello greeting='Hello Anang. Welcome to React programming'/>, document.getElementById('root'));\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}